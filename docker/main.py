import os
from dotenv import load_dotenv
from ldap3 import Server, ALL
from telegram import Update, helpers
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters
)
from telegram.constants import (
ParseMode
)

import add_group
import create_user
import disable_user
import ldap_pass
import list_users
import remove_group
import unlock_user

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
# load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("TOKEN")
ADMIN_IDS = [int(admin_id.strip()) for admin_id in os.getenv("ADMINS", "").split(",") if admin_id.strip()]

ldap_server = os.getenv("LDAP_SERVER")
# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
server = Server(ldap_server, get_info=ALL, use_ssl=True)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º SSL

VPN_ACCESS_GROUP = os.getenv("VPN_ACCESS_GROUP")

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS


async def laps(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text(f"‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í–∞—à ID: {update.effective_user.id}")
        return

    if len(context.args) != 1:
        await update.message.reply_text(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–¥–∞—Ç—å –∏–º—è –∫–æ–º–ø—å—é–µ—Ç—Ä–∞: /laps PC1")
        return
    pc_name = context.args[0]

    laps_info = ldap_pass.get_computer_laps_password(server, pc_name)
    if laps_info['success']:
        await update.message.reply_text(f"‚úÖ `{pc_name}`\n" +
                                        f"–õ–æ–≥–∏–Ω: `"+helpers.escape_markdown(f"{pc_name}\\loc.admin", 2)+"`\n" +
                                        f"–ü–∞—Ä–æ–ª—å: ||{helpers.escape_markdown(laps_info['laps_password'], 2)}||\n"+
            f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {helpers.escape_markdown(laps_info['laps_expiry'], 2)} {helpers.escape_markdown(laps_info['laps_expiry_status'], 2)}\n"+
            (f"–û–°: {helpers.escape_markdown(laps_info['os'], 2)}"  if 'os' in laps_info else "")+
            (f"LastLogon: {helpers.escape_markdown(laps_info['last_logon'], 2)}"  if 'last_logon' in laps_info else ""),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    else:
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {laps_info['message']}")


async def vpnenable(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text(f"‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í–∞—à ID: {update.effective_user.id}")
        return

    if len(context.args) != 1:
        await update.message.reply_text(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–¥–∞—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /vpnenable IvanovVP")
        return

    login = context.args[0]
    result = add_group.add_user_to_group(server, login, VPN_ACCESS_GROUP)
    await update.message.reply_text(("‚úÖ –û—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –∫ VPN." if result["success"] else "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")+"\n"+
                                       result["message"])


async def vpndisable(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text(f"‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í–∞—à ID: {update.effective_user.id}")
        return

    if len(context.args) != 1:
        await update.message.reply_text(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–¥–∞—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /vpndisable IvanovVP")
        return

    login = context.args[0]
    result = remove_group.remove_user_from_group(server, login, VPN_ACCESS_GROUP)
    await update.message.reply_text(("‚úÖ –û—Ç–æ–∑–≤–∞–Ω –¥–æ—Å—Ç—É–ø –∫ VPN." if result["success"] else "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞") + "\n" +
                                    result["message"])


async def newuser(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text(f"‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í–∞—à ID: {update.effective_user.id}")
        return

    if len(context.args) < 2:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /newuser <role> <–§–ò–û>")
        return

    group, *full_name = context.args
    result = create_user.create_user(server, ' '.join(full_name), group)


    if result['success']:
        await update.message.reply_text(
            helpers.escape_markdown("‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¥–æ–º–µ–Ω.\n", 2) +
            helpers.escape_markdown("–õ–æ–≥–∏–Ω: ", 2) + "`" + helpers.escape_markdown(result['login'], 2) + "`\n" +
            helpers.escape_markdown("–í—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: ", 2) + "||" + helpers.escape_markdown(result['temp_pass'], 2) + "||\n" +
            helpers.escape_markdown(f"–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: {result['ou']}\n", 2) +
            helpers.escape_markdown(f"–ì—Ä—É–ø–ø—ã: {','.join(result['groups_added'])}", 2),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await update.message.reply_text(f"–°—Ç–∞—Ç—É—Å —Å–æ–∑–¥–∞–Ω–∏—è: {result["message"]}")
    else:
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {result["message"]}")



async def disableuser(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text(f"‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í–∞—à ID: {update.effective_user.id}")
        return

    if len(context.args) != 1:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /disableuser IvanovVP")
        return

    login = context.args[0]
    result = disable_user.disable_user(server, login)
    await update.message.reply_text(
        ("‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω." if result["success"] else "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞") + "\n" +
        result["message"])


async def listusers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text(f"‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í–∞—à ID: {update.effective_user.id}")
        return

    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ OU –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã"""
    result = list_users.get_users_by_ou(server)

    if not result['success']:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {result['message']}")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
    message = "üìã <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è–º</b>\n\n"

    for ou, users in result['users_by_ou'].items():
        if not users:
            continue

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        ou_name = ou.split(',')[0].replace('OU=', '')
        message += f"üèõ <b>{ou_name}</b>:\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–ø–∏—Å–æ–∫
        for i, user in enumerate(users, 1):
            login = user['sAMAccountName'] or "–Ω–µ—Ç –ª–æ–≥–∏–Ω–∞"
            name = user['displayName'] or "–Ω–µ—Ç –∏–º–µ–Ω–∏"
            message += f"{i}. <code>{login}</code> - {name}\n"

        message += "\n"  # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –º–µ–∂–¥—É –æ—Ç–¥–µ–ª–∞–º–∏

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    max_length = 4000  # –õ–∏–º–∏—Ç Telegram
    if len(message) > max_length:
        parts = [message[i:i + max_length] for i in range(0, len(message), max_length)]
        for part in parts:
            await update.message.reply_text(part, parse_mode='HTML')
    else:
        await update.message.reply_text(message, parse_mode='HTML')

async def unlockuser(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text(f"‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í–∞—à ID: {update.effective_user.id}")
        return

    if len(context.args) != 1:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unlockuser IvanovVP")
        return

    login = context.args[0]
    result = unlock_user.unlock_user(server, login)
    await update.message.reply_text(
        ("‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω." if result["success"] else "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞") + "\n" +
        result["message"])

async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")


def main():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not BOT_TOKEN:
        raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    if not ADMIN_IDS:
        raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω—ã ADMINS –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    application = Application.builder().token(BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    commands = [
        ("laps", laps),
        ("vpnenable", vpnenable),
        ("vpndisable", vpndisable),
        ("newuser", newuser),
        ("disableuser", disableuser),
        ("listusers", listusers),
        ("unlockuser", unlockuser)
    ]

    for cmd, handler in commands:
        application.add_handler(CommandHandler(cmd, handler))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    application.add_handler(MessageHandler(filters.COMMAND, unknown))

    print(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {ADMIN_IDS}")
    application.run_polling()


if __name__ == "__main__":
    main()