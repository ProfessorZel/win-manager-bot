import logging

from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters
)
from telegram.ext import ContextTypes, ConversationHandler

from auth.perms_storage import check_perms
from auth.sync_job import sync_perms_from_ad
from commands import laps
from commands.newuser import CHOOSING_GROUP, TYPING_FULL_NAME, cancel, newuser, group_chosen, full_name_received
from commands.resetpass import resetpassword
from commands.vpn import vpnenable, vpndisable
from common.config import settings
from operations import list_users, disable_user
from operations.unlockuser import unlock_user

logging.root.setLevel(logging.INFO)

async def unlockuser(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not check_perms(update.effective_user.id, "unlockuser"):
        await update.message.reply_text(f"‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í–∞—à ID: {update.effective_user.id}")
        return

    if len(context.args) != 1:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unlockuser IvanovVP")
        return

    login = context.args[0]
    result = unlock_user(login)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è unlock_user –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞
    await update.message.reply_text(
        ("‚úÖ –£—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞." if result["success"] else "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞") + "\n" +
        result["message"])

async def disableuser(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not check_perms(update.effective_user.id, "blockuser"):
        await update.message.reply_text(f"‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í–∞—à ID: {update.effective_user.id}")
        return

    if len(context.args) != 1:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /blockuser IvanovVP")
        return

    login = context.args[0]
    result = disable_user.disable_user(login)
    await update.message.reply_text(
        ("‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω." if result["success"] else "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞") + "\n" +
        result["message"])


async def listusers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not check_perms(update.effective_user.id, "listusers"):
        await update.message.reply_text(f"‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í–∞—à ID: {update.effective_user.id}")
        return

    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ OU –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã"""
    result = list_users.get_users_by_ou()

    if not result['success']:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {result['message']}")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
    message = "üìã <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è–º</b>\n\n"

    for ou, users in result['users_by_ou'].items():
        if not users:
            continue

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        ou_name = ou.split(',')[0].replace('OU=', '')
        message += f"üèõ <b>{ou_name}</b>:\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–ø–∏—Å–æ–∫
        for i, user in enumerate(users, 1):
            login = user['sAMAccountName'] or "–Ω–µ—Ç –ª–æ–≥–∏–Ω–∞"
            name = user['displayName'] or "–Ω–µ—Ç –∏–º–µ–Ω–∏"
            message += f"{i}. <code>{login}</code> - {name}\n"

        message += "\n"  # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –º–µ–∂–¥—É –æ—Ç–¥–µ–ª–∞–º–∏

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    max_length = 4000  # –õ–∏–º–∏—Ç Telegram
    if len(message) > max_length:
        parts = [message[i:i + max_length] for i in range(0, len(message), max_length)]
        for part in parts:
            await update.message.reply_text(part, parse_mode='HTML')
    else:
        await update.message.reply_text(message, parse_mode='HTML')


async def unknown(update: Update, _: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–∞—à ID: {update.effective_user.id}")

async def start(update: Update, _: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"–í–∞—à ID: {update.effective_user.id}")


def main():
    logging.warning("BOT STARTING")
    if not settings.bot_token:
        raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    application = Application.builder().token(settings.bot_token).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º ConversationHandler –¥–ª—è newuser
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('newuser', newuser)],
        states={
            CHOOSING_GROUP: [MessageHandler(filters.TEXT & ~filters.COMMAND, group_chosen)],
            TYPING_FULL_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, full_name_received)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    application.add_handler(conv_handler)

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...
    commands = [
        ("start", start),
        ("laps", laps),
        ("vpnenable", vpnenable),
        ("vpndisable", vpndisable),
        ("disableuser", disableuser),
        ("listusers", listusers),
        ("resetpass", resetpassword),
        ("unlockuser", unlockuser),
    ]

    for cmd, handler in commands:
        application.add_handler(CommandHandler(cmd, handler))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    application.add_handler(MessageHandler(filters.COMMAND, unknown))

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    application.job_queue.run_repeating(
        sync_perms_from_ad,
        interval=settings.group_perms_sync_interval_seconds,  # –ö–∞–∂–¥—ã–π —á–∞—Å
        first=1,
    )

    application.run_polling()


if __name__ == "__main__":
    main()