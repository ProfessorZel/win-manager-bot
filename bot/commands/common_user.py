from datetime import datetime, timezone, timedelta

from telegram import Update
from telegram.ext import ContextTypes

from auth.audit import writeAuditLog
from auth.perms_storage import check_perms, Permissions
from operations import disable_user
from operations.list_users import get_users_by_ou
from operations.unlockuser import unlock_user


async def unlockuser(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not check_perms(update.effective_user.id, Permissions.UNLOCKUSER):
        await update.message.reply_text(f"‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í–∞—à ID: {update.effective_user.id}")
        return

    if len(context.args) != 1:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unlockuser IvanovVP")
        return

    login = context.args[0]
    result = unlock_user(login)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è unlock_user –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞
    await update.message.reply_text(
        ("‚úÖ –£—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞." if result["success"] else "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞") + "\n" +
        result["message"])

async def disableuser(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not check_perms(update.effective_user.id, Permissions.BLOCKUSER):
        await update.message.reply_text(f"‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í–∞—à ID: {update.effective_user.id}")
        return

    if len(context.args) != 1:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /blockuser IvanovVP")
        return

    login = context.args[0]
    result = disable_user.disable_user(login)
    await update.message.reply_text(
        ("‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω." if result["success"] else "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞") + "\n" +
        result["message"])


async def listusers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not check_perms(update.effective_user.id, Permissions.LISTUSERS):
        await update.message.reply_text(f"‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í–∞—à ID: {update.effective_user.id}")
        return

    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ OU –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã"""
    result = get_users_by_ou()

    if not result['success']:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {result['message']}")
        return

    # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    now = datetime.now(timezone.utc)
    thirty_days_ago = now - timedelta(days=30)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
    message = "üìã <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è–º</b>\n\n"
    message += "‚ö†Ô∏è - –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (—Å–æ–∑–¥–∞–Ω—ã >30 –¥–Ω–µ–π –Ω–∞–∑–∞–¥ –∏ –Ω–µ –≤—Ö–æ–¥–∏–ª–∏ >30 –¥–Ω–µ–π)\n\n"

    for ou, users in result['users_by_ou'].items():
        if not users:
            continue

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        ou_name = ou.split(',')[0].replace('OU=', '')
        message += f"üèõ <b>{ou_name}</b>:\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–ø–∏—Å–æ–∫
        for i, user in enumerate(users, 1):
            login = user['sAMAccountName'] or "–Ω–µ—Ç –ª–æ–≥–∏–Ω–∞"
            name = user['displayName'] or "–Ω–µ—Ç –∏–º–µ–Ω–∏"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            is_inactive = False
            if user['whenCreated'] and user['lastLogonTimestamp']:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—á–∏—Ç–∞–µ—Ç—Å—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º, –µ—Å–ª–∏:
                # 1. –ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω –±–æ–ª–µ–µ 30 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
                # 2. –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥ –±—ã–ª –±–æ–ª–µ–µ 30 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
                if (user['whenCreated'] < thirty_days_ago and
                        user['lastLogonTimestamp'] < thirty_days_ago):
                    is_inactive = True
            elif user['whenCreated']:
                # –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –≤—Ö–æ–¥–µ, –Ω–æ –∞–∫–∫–∞—É–Ω—Ç —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
                if user['whenCreated'] < thirty_days_ago:
                    is_inactive = True

            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–º–µ—Ç–∫—É –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            inactive_mark = "‚ö†Ô∏è " if is_inactive else ""
            message += f"{i}. {inactive_mark}<code>{login}</code> - {name}\n"

        message += "\n"  # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –º–µ–∂–¥—É –æ—Ç–¥–µ–ª–∞–º–∏

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    max_length = 4000  # –õ–∏–º–∏—Ç Telegram
    if len(message) > max_length:
        parts = [message[i:i + max_length] for i in range(0, len(message), max_length)]
        for part in parts:
            await update.message.reply_text(part, parse_mode='HTML')
    else:
        await update.message.reply_text(message, parse_mode='HTML')